//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_enums.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#pragma once

#include "duckdb/common/constants.hpp"
#include "duckdb/common/enum_util.hpp"

namespace duckdb {

enum class VMFScanType : uint8_t {
	INVALID = 0,
	//! Read VMF straight to columnar data
	READ_VMF = 1,
	//! Read VMF values as strings
	READ_VMF_OBJECTS = 2,
	//! Sample run for schema detection
	SAMPLE = 3,
};

enum class VMFRecordType : uint8_t {
	AUTO_DETECT = 0,
	//! Sequential objects that are unpacked
	RECORDS = 1,
	//! Any other VMF type, e.g., ARRAY
	VALUES = 2,
};

enum class VMFFormat : uint8_t {
	//! Auto-detect format (UNSTRUCTURED / NEWLINE_DELIMITED)
	AUTO_DETECT = 0,
	//! One unit after another, newlines can be anywhere
	UNSTRUCTURED = 1,
	//! Units are separated by newlines, newlines do not occur within Units (NDVMF)
	NEWLINE_DELIMITED = 2,
	//! File is one big array of units
	ARRAY = 3,
};

template<>
const char* EnumUtil::ToChars<VMFScanType>(VMFScanType value);

template<>
VMFScanType EnumUtil::FromString<VMFScanType>(const char *value);

template<>
const char* EnumUtil::ToChars<VMFRecordType>(VMFRecordType value);

template<>
VMFRecordType EnumUtil::FromString<VMFRecordType>(const char *value);

template<>
const char* EnumUtil::ToChars<VMFFormat>(VMFFormat value);

template<>
VMFFormat EnumUtil::FromString<VMFFormat>(const char *value);

} // namespace duckdb
